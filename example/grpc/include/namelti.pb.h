// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: namelti.proto

#ifndef PROTOBUF_INCLUDED_namelti_2eproto
#define PROTOBUF_INCLUDED_namelti_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_namelti_2eproto 

namespace protobuf_namelti_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[7];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_namelti_2eproto
namespace namelti {
namespace server {
class NameltiTranscriptRequest;
class NameltiTranscriptRequestDefaultTypeInternal;
extern NameltiTranscriptRequestDefaultTypeInternal _NameltiTranscriptRequest_default_instance_;
class NameltiTranscriptRequests;
class NameltiTranscriptRequestsDefaultTypeInternal;
extern NameltiTranscriptRequestsDefaultTypeInternal _NameltiTranscriptRequests_default_instance_;
class NameltiTranscriptResponse;
class NameltiTranscriptResponseDefaultTypeInternal;
extern NameltiTranscriptResponseDefaultTypeInternal _NameltiTranscriptResponse_default_instance_;
class NameltiTranscriptResponses;
class NameltiTranscriptResponsesDefaultTypeInternal;
extern NameltiTranscriptResponsesDefaultTypeInternal _NameltiTranscriptResponses_default_instance_;
class NameltiTranscriptResponses_ResponsesEntry_DoNotUse;
class NameltiTranscriptResponses_ResponsesEntry_DoNotUseDefaultTypeInternal;
extern NameltiTranscriptResponses_ResponsesEntry_DoNotUseDefaultTypeInternal _NameltiTranscriptResponses_ResponsesEntry_DoNotUse_default_instance_;
class ResultList;
class ResultListDefaultTypeInternal;
extern ResultListDefaultTypeInternal _ResultList_default_instance_;
class ResultList_Result;
class ResultList_ResultDefaultTypeInternal;
extern ResultList_ResultDefaultTypeInternal _ResultList_Result_default_instance_;
}  // namespace server
}  // namespace namelti
namespace google {
namespace protobuf {
template<> ::namelti::server::NameltiTranscriptRequest* Arena::CreateMaybeMessage<::namelti::server::NameltiTranscriptRequest>(Arena*);
template<> ::namelti::server::NameltiTranscriptRequests* Arena::CreateMaybeMessage<::namelti::server::NameltiTranscriptRequests>(Arena*);
template<> ::namelti::server::NameltiTranscriptResponse* Arena::CreateMaybeMessage<::namelti::server::NameltiTranscriptResponse>(Arena*);
template<> ::namelti::server::NameltiTranscriptResponses* Arena::CreateMaybeMessage<::namelti::server::NameltiTranscriptResponses>(Arena*);
template<> ::namelti::server::NameltiTranscriptResponses_ResponsesEntry_DoNotUse* Arena::CreateMaybeMessage<::namelti::server::NameltiTranscriptResponses_ResponsesEntry_DoNotUse>(Arena*);
template<> ::namelti::server::ResultList* Arena::CreateMaybeMessage<::namelti::server::ResultList>(Arena*);
template<> ::namelti::server::ResultList_Result* Arena::CreateMaybeMessage<::namelti::server::ResultList_Result>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace namelti {
namespace server {

// ===================================================================

class NameltiTranscriptRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:namelti.server.NameltiTranscriptRequest) */ {
 public:
  NameltiTranscriptRequest();
  virtual ~NameltiTranscriptRequest();

  NameltiTranscriptRequest(const NameltiTranscriptRequest& from);

  inline NameltiTranscriptRequest& operator=(const NameltiTranscriptRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NameltiTranscriptRequest(NameltiTranscriptRequest&& from) noexcept
    : NameltiTranscriptRequest() {
    *this = ::std::move(from);
  }

  inline NameltiTranscriptRequest& operator=(NameltiTranscriptRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NameltiTranscriptRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NameltiTranscriptRequest* internal_default_instance() {
    return reinterpret_cast<const NameltiTranscriptRequest*>(
               &_NameltiTranscriptRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(NameltiTranscriptRequest* other);
  friend void swap(NameltiTranscriptRequest& a, NameltiTranscriptRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NameltiTranscriptRequest* New() const final {
    return CreateMaybeMessage<NameltiTranscriptRequest>(NULL);
  }

  NameltiTranscriptRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NameltiTranscriptRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NameltiTranscriptRequest& from);
  void MergeFrom(const NameltiTranscriptRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NameltiTranscriptRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // @@protoc_insertion_point(class_scope:namelti.server.NameltiTranscriptRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_namelti_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NameltiTranscriptRequests : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:namelti.server.NameltiTranscriptRequests) */ {
 public:
  NameltiTranscriptRequests();
  virtual ~NameltiTranscriptRequests();

  NameltiTranscriptRequests(const NameltiTranscriptRequests& from);

  inline NameltiTranscriptRequests& operator=(const NameltiTranscriptRequests& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NameltiTranscriptRequests(NameltiTranscriptRequests&& from) noexcept
    : NameltiTranscriptRequests() {
    *this = ::std::move(from);
  }

  inline NameltiTranscriptRequests& operator=(NameltiTranscriptRequests&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NameltiTranscriptRequests& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NameltiTranscriptRequests* internal_default_instance() {
    return reinterpret_cast<const NameltiTranscriptRequests*>(
               &_NameltiTranscriptRequests_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(NameltiTranscriptRequests* other);
  friend void swap(NameltiTranscriptRequests& a, NameltiTranscriptRequests& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NameltiTranscriptRequests* New() const final {
    return CreateMaybeMessage<NameltiTranscriptRequests>(NULL);
  }

  NameltiTranscriptRequests* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NameltiTranscriptRequests>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NameltiTranscriptRequests& from);
  void MergeFrom(const NameltiTranscriptRequests& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NameltiTranscriptRequests* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string queries = 1;
  int queries_size() const;
  void clear_queries();
  static const int kQueriesFieldNumber = 1;
  const ::std::string& queries(int index) const;
  ::std::string* mutable_queries(int index);
  void set_queries(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_queries(int index, ::std::string&& value);
  #endif
  void set_queries(int index, const char* value);
  void set_queries(int index, const char* value, size_t size);
  ::std::string* add_queries();
  void add_queries(const ::std::string& value);
  #if LANG_CXX11
  void add_queries(::std::string&& value);
  #endif
  void add_queries(const char* value);
  void add_queries(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& queries() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_queries();

  // @@protoc_insertion_point(class_scope:namelti.server.NameltiTranscriptRequests)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> queries_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_namelti_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResultList_Result : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:namelti.server.ResultList.Result) */ {
 public:
  ResultList_Result();
  virtual ~ResultList_Result();

  ResultList_Result(const ResultList_Result& from);

  inline ResultList_Result& operator=(const ResultList_Result& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResultList_Result(ResultList_Result&& from) noexcept
    : ResultList_Result() {
    *this = ::std::move(from);
  }

  inline ResultList_Result& operator=(ResultList_Result&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResultList_Result& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResultList_Result* internal_default_instance() {
    return reinterpret_cast<const ResultList_Result*>(
               &_ResultList_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ResultList_Result* other);
  friend void swap(ResultList_Result& a, ResultList_Result& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResultList_Result* New() const final {
    return CreateMaybeMessage<ResultList_Result>(NULL);
  }

  ResultList_Result* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResultList_Result>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ResultList_Result& from);
  void MergeFrom(const ResultList_Result& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResultList_Result* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string yomi = 1;
  void clear_yomi();
  static const int kYomiFieldNumber = 1;
  const ::std::string& yomi() const;
  void set_yomi(const ::std::string& value);
  #if LANG_CXX11
  void set_yomi(::std::string&& value);
  #endif
  void set_yomi(const char* value);
  void set_yomi(const char* value, size_t size);
  ::std::string* mutable_yomi();
  ::std::string* release_yomi();
  void set_allocated_yomi(::std::string* yomi);

  // float score = 2;
  void clear_score();
  static const int kScoreFieldNumber = 2;
  float score() const;
  void set_score(float value);

  // @@protoc_insertion_point(class_scope:namelti.server.ResultList.Result)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr yomi_;
  float score_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_namelti_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResultList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:namelti.server.ResultList) */ {
 public:
  ResultList();
  virtual ~ResultList();

  ResultList(const ResultList& from);

  inline ResultList& operator=(const ResultList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResultList(ResultList&& from) noexcept
    : ResultList() {
    *this = ::std::move(from);
  }

  inline ResultList& operator=(ResultList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResultList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResultList* internal_default_instance() {
    return reinterpret_cast<const ResultList*>(
               &_ResultList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ResultList* other);
  friend void swap(ResultList& a, ResultList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResultList* New() const final {
    return CreateMaybeMessage<ResultList>(NULL);
  }

  ResultList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResultList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ResultList& from);
  void MergeFrom(const ResultList& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResultList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ResultList_Result Result;

  // accessors -------------------------------------------------------

  // repeated .namelti.server.ResultList.Result results = 1;
  int results_size() const;
  void clear_results();
  static const int kResultsFieldNumber = 1;
  ::namelti::server::ResultList_Result* mutable_results(int index);
  ::google::protobuf::RepeatedPtrField< ::namelti::server::ResultList_Result >*
      mutable_results();
  const ::namelti::server::ResultList_Result& results(int index) const;
  ::namelti::server::ResultList_Result* add_results();
  const ::google::protobuf::RepeatedPtrField< ::namelti::server::ResultList_Result >&
      results() const;

  // @@protoc_insertion_point(class_scope:namelti.server.ResultList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::namelti::server::ResultList_Result > results_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_namelti_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NameltiTranscriptResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:namelti.server.NameltiTranscriptResponse) */ {
 public:
  NameltiTranscriptResponse();
  virtual ~NameltiTranscriptResponse();

  NameltiTranscriptResponse(const NameltiTranscriptResponse& from);

  inline NameltiTranscriptResponse& operator=(const NameltiTranscriptResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NameltiTranscriptResponse(NameltiTranscriptResponse&& from) noexcept
    : NameltiTranscriptResponse() {
    *this = ::std::move(from);
  }

  inline NameltiTranscriptResponse& operator=(NameltiTranscriptResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NameltiTranscriptResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NameltiTranscriptResponse* internal_default_instance() {
    return reinterpret_cast<const NameltiTranscriptResponse*>(
               &_NameltiTranscriptResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(NameltiTranscriptResponse* other);
  friend void swap(NameltiTranscriptResponse& a, NameltiTranscriptResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NameltiTranscriptResponse* New() const final {
    return CreateMaybeMessage<NameltiTranscriptResponse>(NULL);
  }

  NameltiTranscriptResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NameltiTranscriptResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NameltiTranscriptResponse& from);
  void MergeFrom(const NameltiTranscriptResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NameltiTranscriptResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string surface = 1;
  void clear_surface();
  static const int kSurfaceFieldNumber = 1;
  const ::std::string& surface() const;
  void set_surface(const ::std::string& value);
  #if LANG_CXX11
  void set_surface(::std::string&& value);
  #endif
  void set_surface(const char* value);
  void set_surface(const char* value, size_t size);
  ::std::string* mutable_surface();
  ::std::string* release_surface();
  void set_allocated_surface(::std::string* surface);

  // .namelti.server.ResultList results = 2;
  bool has_results() const;
  void clear_results();
  static const int kResultsFieldNumber = 2;
  private:
  const ::namelti::server::ResultList& _internal_results() const;
  public:
  const ::namelti::server::ResultList& results() const;
  ::namelti::server::ResultList* release_results();
  ::namelti::server::ResultList* mutable_results();
  void set_allocated_results(::namelti::server::ResultList* results);

  // @@protoc_insertion_point(class_scope:namelti.server.NameltiTranscriptResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr surface_;
  ::namelti::server::ResultList* results_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_namelti_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NameltiTranscriptResponses_ResponsesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<NameltiTranscriptResponses_ResponsesEntry_DoNotUse, 
    ::std::string, ::namelti::server::ResultList,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<NameltiTranscriptResponses_ResponsesEntry_DoNotUse, 
    ::std::string, ::namelti::server::ResultList,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  NameltiTranscriptResponses_ResponsesEntry_DoNotUse();
  NameltiTranscriptResponses_ResponsesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const NameltiTranscriptResponses_ResponsesEntry_DoNotUse& other);
  static const NameltiTranscriptResponses_ResponsesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const NameltiTranscriptResponses_ResponsesEntry_DoNotUse*>(&_NameltiTranscriptResponses_ResponsesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class NameltiTranscriptResponses : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:namelti.server.NameltiTranscriptResponses) */ {
 public:
  NameltiTranscriptResponses();
  virtual ~NameltiTranscriptResponses();

  NameltiTranscriptResponses(const NameltiTranscriptResponses& from);

  inline NameltiTranscriptResponses& operator=(const NameltiTranscriptResponses& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NameltiTranscriptResponses(NameltiTranscriptResponses&& from) noexcept
    : NameltiTranscriptResponses() {
    *this = ::std::move(from);
  }

  inline NameltiTranscriptResponses& operator=(NameltiTranscriptResponses&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NameltiTranscriptResponses& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NameltiTranscriptResponses* internal_default_instance() {
    return reinterpret_cast<const NameltiTranscriptResponses*>(
               &_NameltiTranscriptResponses_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(NameltiTranscriptResponses* other);
  friend void swap(NameltiTranscriptResponses& a, NameltiTranscriptResponses& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NameltiTranscriptResponses* New() const final {
    return CreateMaybeMessage<NameltiTranscriptResponses>(NULL);
  }

  NameltiTranscriptResponses* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NameltiTranscriptResponses>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NameltiTranscriptResponses& from);
  void MergeFrom(const NameltiTranscriptResponses& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NameltiTranscriptResponses* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, .namelti.server.ResultList> responses = 1;
  int responses_size() const;
  void clear_responses();
  static const int kResponsesFieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, ::namelti::server::ResultList >&
      responses() const;
  ::google::protobuf::Map< ::std::string, ::namelti::server::ResultList >*
      mutable_responses();

  // @@protoc_insertion_point(class_scope:namelti.server.NameltiTranscriptResponses)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      NameltiTranscriptResponses_ResponsesEntry_DoNotUse,
      ::std::string, ::namelti::server::ResultList,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > responses_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_namelti_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NameltiTranscriptRequest

// string query = 1;
inline void NameltiTranscriptRequest::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NameltiTranscriptRequest::query() const {
  // @@protoc_insertion_point(field_get:namelti.server.NameltiTranscriptRequest.query)
  return query_.GetNoArena();
}
inline void NameltiTranscriptRequest::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:namelti.server.NameltiTranscriptRequest.query)
}
#if LANG_CXX11
inline void NameltiTranscriptRequest::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:namelti.server.NameltiTranscriptRequest.query)
}
#endif
inline void NameltiTranscriptRequest::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:namelti.server.NameltiTranscriptRequest.query)
}
inline void NameltiTranscriptRequest::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:namelti.server.NameltiTranscriptRequest.query)
}
inline ::std::string* NameltiTranscriptRequest::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:namelti.server.NameltiTranscriptRequest.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NameltiTranscriptRequest::release_query() {
  // @@protoc_insertion_point(field_release:namelti.server.NameltiTranscriptRequest.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NameltiTranscriptRequest::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:namelti.server.NameltiTranscriptRequest.query)
}

// -------------------------------------------------------------------

// NameltiTranscriptRequests

// repeated string queries = 1;
inline int NameltiTranscriptRequests::queries_size() const {
  return queries_.size();
}
inline void NameltiTranscriptRequests::clear_queries() {
  queries_.Clear();
}
inline const ::std::string& NameltiTranscriptRequests::queries(int index) const {
  // @@protoc_insertion_point(field_get:namelti.server.NameltiTranscriptRequests.queries)
  return queries_.Get(index);
}
inline ::std::string* NameltiTranscriptRequests::mutable_queries(int index) {
  // @@protoc_insertion_point(field_mutable:namelti.server.NameltiTranscriptRequests.queries)
  return queries_.Mutable(index);
}
inline void NameltiTranscriptRequests::set_queries(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:namelti.server.NameltiTranscriptRequests.queries)
  queries_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void NameltiTranscriptRequests::set_queries(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:namelti.server.NameltiTranscriptRequests.queries)
  queries_.Mutable(index)->assign(std::move(value));
}
#endif
inline void NameltiTranscriptRequests::set_queries(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  queries_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:namelti.server.NameltiTranscriptRequests.queries)
}
inline void NameltiTranscriptRequests::set_queries(int index, const char* value, size_t size) {
  queries_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:namelti.server.NameltiTranscriptRequests.queries)
}
inline ::std::string* NameltiTranscriptRequests::add_queries() {
  // @@protoc_insertion_point(field_add_mutable:namelti.server.NameltiTranscriptRequests.queries)
  return queries_.Add();
}
inline void NameltiTranscriptRequests::add_queries(const ::std::string& value) {
  queries_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:namelti.server.NameltiTranscriptRequests.queries)
}
#if LANG_CXX11
inline void NameltiTranscriptRequests::add_queries(::std::string&& value) {
  queries_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:namelti.server.NameltiTranscriptRequests.queries)
}
#endif
inline void NameltiTranscriptRequests::add_queries(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  queries_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:namelti.server.NameltiTranscriptRequests.queries)
}
inline void NameltiTranscriptRequests::add_queries(const char* value, size_t size) {
  queries_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:namelti.server.NameltiTranscriptRequests.queries)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NameltiTranscriptRequests::queries() const {
  // @@protoc_insertion_point(field_list:namelti.server.NameltiTranscriptRequests.queries)
  return queries_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NameltiTranscriptRequests::mutable_queries() {
  // @@protoc_insertion_point(field_mutable_list:namelti.server.NameltiTranscriptRequests.queries)
  return &queries_;
}

// -------------------------------------------------------------------

// ResultList_Result

// string yomi = 1;
inline void ResultList_Result::clear_yomi() {
  yomi_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ResultList_Result::yomi() const {
  // @@protoc_insertion_point(field_get:namelti.server.ResultList.Result.yomi)
  return yomi_.GetNoArena();
}
inline void ResultList_Result::set_yomi(const ::std::string& value) {
  
  yomi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:namelti.server.ResultList.Result.yomi)
}
#if LANG_CXX11
inline void ResultList_Result::set_yomi(::std::string&& value) {
  
  yomi_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:namelti.server.ResultList.Result.yomi)
}
#endif
inline void ResultList_Result::set_yomi(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  yomi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:namelti.server.ResultList.Result.yomi)
}
inline void ResultList_Result::set_yomi(const char* value, size_t size) {
  
  yomi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:namelti.server.ResultList.Result.yomi)
}
inline ::std::string* ResultList_Result::mutable_yomi() {
  
  // @@protoc_insertion_point(field_mutable:namelti.server.ResultList.Result.yomi)
  return yomi_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResultList_Result::release_yomi() {
  // @@protoc_insertion_point(field_release:namelti.server.ResultList.Result.yomi)
  
  return yomi_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResultList_Result::set_allocated_yomi(::std::string* yomi) {
  if (yomi != NULL) {
    
  } else {
    
  }
  yomi_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), yomi);
  // @@protoc_insertion_point(field_set_allocated:namelti.server.ResultList.Result.yomi)
}

// float score = 2;
inline void ResultList_Result::clear_score() {
  score_ = 0;
}
inline float ResultList_Result::score() const {
  // @@protoc_insertion_point(field_get:namelti.server.ResultList.Result.score)
  return score_;
}
inline void ResultList_Result::set_score(float value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:namelti.server.ResultList.Result.score)
}

// -------------------------------------------------------------------

// ResultList

// repeated .namelti.server.ResultList.Result results = 1;
inline int ResultList::results_size() const {
  return results_.size();
}
inline void ResultList::clear_results() {
  results_.Clear();
}
inline ::namelti::server::ResultList_Result* ResultList::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:namelti.server.ResultList.results)
  return results_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::namelti::server::ResultList_Result >*
ResultList::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:namelti.server.ResultList.results)
  return &results_;
}
inline const ::namelti::server::ResultList_Result& ResultList::results(int index) const {
  // @@protoc_insertion_point(field_get:namelti.server.ResultList.results)
  return results_.Get(index);
}
inline ::namelti::server::ResultList_Result* ResultList::add_results() {
  // @@protoc_insertion_point(field_add:namelti.server.ResultList.results)
  return results_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::namelti::server::ResultList_Result >&
ResultList::results() const {
  // @@protoc_insertion_point(field_list:namelti.server.ResultList.results)
  return results_;
}

// -------------------------------------------------------------------

// NameltiTranscriptResponse

// string surface = 1;
inline void NameltiTranscriptResponse::clear_surface() {
  surface_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NameltiTranscriptResponse::surface() const {
  // @@protoc_insertion_point(field_get:namelti.server.NameltiTranscriptResponse.surface)
  return surface_.GetNoArena();
}
inline void NameltiTranscriptResponse::set_surface(const ::std::string& value) {
  
  surface_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:namelti.server.NameltiTranscriptResponse.surface)
}
#if LANG_CXX11
inline void NameltiTranscriptResponse::set_surface(::std::string&& value) {
  
  surface_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:namelti.server.NameltiTranscriptResponse.surface)
}
#endif
inline void NameltiTranscriptResponse::set_surface(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  surface_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:namelti.server.NameltiTranscriptResponse.surface)
}
inline void NameltiTranscriptResponse::set_surface(const char* value, size_t size) {
  
  surface_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:namelti.server.NameltiTranscriptResponse.surface)
}
inline ::std::string* NameltiTranscriptResponse::mutable_surface() {
  
  // @@protoc_insertion_point(field_mutable:namelti.server.NameltiTranscriptResponse.surface)
  return surface_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NameltiTranscriptResponse::release_surface() {
  // @@protoc_insertion_point(field_release:namelti.server.NameltiTranscriptResponse.surface)
  
  return surface_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NameltiTranscriptResponse::set_allocated_surface(::std::string* surface) {
  if (surface != NULL) {
    
  } else {
    
  }
  surface_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), surface);
  // @@protoc_insertion_point(field_set_allocated:namelti.server.NameltiTranscriptResponse.surface)
}

// .namelti.server.ResultList results = 2;
inline bool NameltiTranscriptResponse::has_results() const {
  return this != internal_default_instance() && results_ != NULL;
}
inline void NameltiTranscriptResponse::clear_results() {
  if (GetArenaNoVirtual() == NULL && results_ != NULL) {
    delete results_;
  }
  results_ = NULL;
}
inline const ::namelti::server::ResultList& NameltiTranscriptResponse::_internal_results() const {
  return *results_;
}
inline const ::namelti::server::ResultList& NameltiTranscriptResponse::results() const {
  const ::namelti::server::ResultList* p = results_;
  // @@protoc_insertion_point(field_get:namelti.server.NameltiTranscriptResponse.results)
  return p != NULL ? *p : *reinterpret_cast<const ::namelti::server::ResultList*>(
      &::namelti::server::_ResultList_default_instance_);
}
inline ::namelti::server::ResultList* NameltiTranscriptResponse::release_results() {
  // @@protoc_insertion_point(field_release:namelti.server.NameltiTranscriptResponse.results)
  
  ::namelti::server::ResultList* temp = results_;
  results_ = NULL;
  return temp;
}
inline ::namelti::server::ResultList* NameltiTranscriptResponse::mutable_results() {
  
  if (results_ == NULL) {
    auto* p = CreateMaybeMessage<::namelti::server::ResultList>(GetArenaNoVirtual());
    results_ = p;
  }
  // @@protoc_insertion_point(field_mutable:namelti.server.NameltiTranscriptResponse.results)
  return results_;
}
inline void NameltiTranscriptResponse::set_allocated_results(::namelti::server::ResultList* results) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete results_;
  }
  if (results) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      results = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, results, submessage_arena);
    }
    
  } else {
    
  }
  results_ = results;
  // @@protoc_insertion_point(field_set_allocated:namelti.server.NameltiTranscriptResponse.results)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// NameltiTranscriptResponses

// map<string, .namelti.server.ResultList> responses = 1;
inline int NameltiTranscriptResponses::responses_size() const {
  return responses_.size();
}
inline void NameltiTranscriptResponses::clear_responses() {
  responses_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::namelti::server::ResultList >&
NameltiTranscriptResponses::responses() const {
  // @@protoc_insertion_point(field_map:namelti.server.NameltiTranscriptResponses.responses)
  return responses_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::namelti::server::ResultList >*
NameltiTranscriptResponses::mutable_responses() {
  // @@protoc_insertion_point(field_mutable_map:namelti.server.NameltiTranscriptResponses.responses)
  return responses_.MutableMap();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace server
}  // namespace namelti

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_namelti_2eproto
