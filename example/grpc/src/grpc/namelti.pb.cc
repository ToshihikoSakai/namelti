// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: namelti.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "namelti.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace namelti {
namespace server {
class NameltiTranscriptRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NameltiTranscriptRequest> {
} _NameltiTranscriptRequest_default_instance_;
class MapVauleDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MapVaule> {
} _MapVaule_default_instance_;
class NameltiTranscriptResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NameltiTranscriptResponse> {
} _NameltiTranscriptResponse_default_instance_;

namespace protobuf_namelti_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[4];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameltiTranscriptRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameltiTranscriptRequest, queries_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapVaule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapVaule, dict_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameltiTranscriptResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameltiTranscriptResponse, results_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(NameltiTranscriptRequest)},
  { 5, -1, sizeof(MapVaule)},
  { 10, -1, sizeof(NameltiTranscriptResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_NameltiTranscriptRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MapVaule_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NameltiTranscriptResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "namelti.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
  const ::google::protobuf::Descriptor* NameltiTranscriptResponse_ResultsEntry_descriptor = protobuf_namelti_2eproto::file_level_metadata[2].descriptor;
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        NameltiTranscriptResponse_ResultsEntry_descriptor,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::namelti::server::MapVaule,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                NameltiTranscriptResponse_ResultsEntry_descriptor));
}

}  // namespace

void TableStruct::Shutdown() {
  _NameltiTranscriptRequest_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _MapVaule_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _NameltiTranscriptResponse_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _NameltiTranscriptRequest_default_instance_.DefaultConstruct();
  _MapVaule_default_instance_.DefaultConstruct();
  _NameltiTranscriptResponse_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\rnamelti.proto\022\016namelti.server\"+\n\030Namel"
      "tiTranscriptRequest\022\017\n\007queries\030\001 \003(\t\"\030\n\010"
      "MapVaule\022\014\n\004dict\030\001 \003(\t\"\256\001\n\031NameltiTransc"
      "riptResponse\022G\n\007results\030\001 \003(\01326.namelti."
      "server.NameltiTranscriptResponse.Results"
      "Entry\032H\n\014ResultsEntry\022\013\n\003key\030\001 \001(\t\022\'\n\005va"
      "lue\030\002 \001(\0132\030.namelti.server.MapVaule:\0028\0012"
      "z\n\016NameltiService\022h\n\017ConvertNameList\022(.n"
      "amelti.server.NameltiTranscriptRequest\032)"
      ".namelti.server.NameltiTranscriptRespons"
      "e\"\000b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 411);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "namelti.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_namelti_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NameltiTranscriptRequest::kQueriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NameltiTranscriptRequest::NameltiTranscriptRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_namelti_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:namelti.server.NameltiTranscriptRequest)
}
NameltiTranscriptRequest::NameltiTranscriptRequest(const NameltiTranscriptRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      queries_(from.queries_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:namelti.server.NameltiTranscriptRequest)
}

void NameltiTranscriptRequest::SharedCtor() {
  _cached_size_ = 0;
}

NameltiTranscriptRequest::~NameltiTranscriptRequest() {
  // @@protoc_insertion_point(destructor:namelti.server.NameltiTranscriptRequest)
  SharedDtor();
}

void NameltiTranscriptRequest::SharedDtor() {
}

void NameltiTranscriptRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NameltiTranscriptRequest::descriptor() {
  protobuf_namelti_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_namelti_2eproto::file_level_metadata[0].descriptor;
}

const NameltiTranscriptRequest& NameltiTranscriptRequest::default_instance() {
  protobuf_namelti_2eproto::InitDefaults();
  return *internal_default_instance();
}

NameltiTranscriptRequest* NameltiTranscriptRequest::New(::google::protobuf::Arena* arena) const {
  NameltiTranscriptRequest* n = new NameltiTranscriptRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NameltiTranscriptRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:namelti.server.NameltiTranscriptRequest)
  queries_.Clear();
}

bool NameltiTranscriptRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:namelti.server.NameltiTranscriptRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string queries = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_queries()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->queries(this->queries_size() - 1).data(),
            this->queries(this->queries_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "namelti.server.NameltiTranscriptRequest.queries"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:namelti.server.NameltiTranscriptRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:namelti.server.NameltiTranscriptRequest)
  return false;
#undef DO_
}

void NameltiTranscriptRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:namelti.server.NameltiTranscriptRequest)
  // repeated string queries = 1;
  for (int i = 0; i < this->queries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->queries(i).data(), this->queries(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "namelti.server.NameltiTranscriptRequest.queries");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->queries(i), output);
  }

  // @@protoc_insertion_point(serialize_end:namelti.server.NameltiTranscriptRequest)
}

::google::protobuf::uint8* NameltiTranscriptRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:namelti.server.NameltiTranscriptRequest)
  // repeated string queries = 1;
  for (int i = 0; i < this->queries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->queries(i).data(), this->queries(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "namelti.server.NameltiTranscriptRequest.queries");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->queries(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:namelti.server.NameltiTranscriptRequest)
  return target;
}

size_t NameltiTranscriptRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:namelti.server.NameltiTranscriptRequest)
  size_t total_size = 0;

  // repeated string queries = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->queries_size());
  for (int i = 0; i < this->queries_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->queries(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NameltiTranscriptRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:namelti.server.NameltiTranscriptRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const NameltiTranscriptRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NameltiTranscriptRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:namelti.server.NameltiTranscriptRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:namelti.server.NameltiTranscriptRequest)
    MergeFrom(*source);
  }
}

void NameltiTranscriptRequest::MergeFrom(const NameltiTranscriptRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:namelti.server.NameltiTranscriptRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  queries_.MergeFrom(from.queries_);
}

void NameltiTranscriptRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:namelti.server.NameltiTranscriptRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NameltiTranscriptRequest::CopyFrom(const NameltiTranscriptRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:namelti.server.NameltiTranscriptRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NameltiTranscriptRequest::IsInitialized() const {
  return true;
}

void NameltiTranscriptRequest::Swap(NameltiTranscriptRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NameltiTranscriptRequest::InternalSwap(NameltiTranscriptRequest* other) {
  queries_.UnsafeArenaSwap(&other->queries_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NameltiTranscriptRequest::GetMetadata() const {
  protobuf_namelti_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_namelti_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NameltiTranscriptRequest

// repeated string queries = 1;
int NameltiTranscriptRequest::queries_size() const {
  return queries_.size();
}
void NameltiTranscriptRequest::clear_queries() {
  queries_.Clear();
}
const ::std::string& NameltiTranscriptRequest::queries(int index) const {
  // @@protoc_insertion_point(field_get:namelti.server.NameltiTranscriptRequest.queries)
  return queries_.Get(index);
}
::std::string* NameltiTranscriptRequest::mutable_queries(int index) {
  // @@protoc_insertion_point(field_mutable:namelti.server.NameltiTranscriptRequest.queries)
  return queries_.Mutable(index);
}
void NameltiTranscriptRequest::set_queries(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:namelti.server.NameltiTranscriptRequest.queries)
  queries_.Mutable(index)->assign(value);
}
void NameltiTranscriptRequest::set_queries(int index, const char* value) {
  queries_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:namelti.server.NameltiTranscriptRequest.queries)
}
void NameltiTranscriptRequest::set_queries(int index, const char* value, size_t size) {
  queries_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:namelti.server.NameltiTranscriptRequest.queries)
}
::std::string* NameltiTranscriptRequest::add_queries() {
  // @@protoc_insertion_point(field_add_mutable:namelti.server.NameltiTranscriptRequest.queries)
  return queries_.Add();
}
void NameltiTranscriptRequest::add_queries(const ::std::string& value) {
  queries_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:namelti.server.NameltiTranscriptRequest.queries)
}
void NameltiTranscriptRequest::add_queries(const char* value) {
  queries_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:namelti.server.NameltiTranscriptRequest.queries)
}
void NameltiTranscriptRequest::add_queries(const char* value, size_t size) {
  queries_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:namelti.server.NameltiTranscriptRequest.queries)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
NameltiTranscriptRequest::queries() const {
  // @@protoc_insertion_point(field_list:namelti.server.NameltiTranscriptRequest.queries)
  return queries_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
NameltiTranscriptRequest::mutable_queries() {
  // @@protoc_insertion_point(field_mutable_list:namelti.server.NameltiTranscriptRequest.queries)
  return &queries_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapVaule::kDictFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapVaule::MapVaule()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_namelti_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:namelti.server.MapVaule)
}
MapVaule::MapVaule(const MapVaule& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      dict_(from.dict_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:namelti.server.MapVaule)
}

void MapVaule::SharedCtor() {
  _cached_size_ = 0;
}

MapVaule::~MapVaule() {
  // @@protoc_insertion_point(destructor:namelti.server.MapVaule)
  SharedDtor();
}

void MapVaule::SharedDtor() {
}

void MapVaule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapVaule::descriptor() {
  protobuf_namelti_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_namelti_2eproto::file_level_metadata[1].descriptor;
}

const MapVaule& MapVaule::default_instance() {
  protobuf_namelti_2eproto::InitDefaults();
  return *internal_default_instance();
}

MapVaule* MapVaule::New(::google::protobuf::Arena* arena) const {
  MapVaule* n = new MapVaule;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MapVaule::Clear() {
// @@protoc_insertion_point(message_clear_start:namelti.server.MapVaule)
  dict_.Clear();
}

bool MapVaule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:namelti.server.MapVaule)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string dict = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_dict()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dict(this->dict_size() - 1).data(),
            this->dict(this->dict_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "namelti.server.MapVaule.dict"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:namelti.server.MapVaule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:namelti.server.MapVaule)
  return false;
#undef DO_
}

void MapVaule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:namelti.server.MapVaule)
  // repeated string dict = 1;
  for (int i = 0; i < this->dict_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dict(i).data(), this->dict(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "namelti.server.MapVaule.dict");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->dict(i), output);
  }

  // @@protoc_insertion_point(serialize_end:namelti.server.MapVaule)
}

::google::protobuf::uint8* MapVaule::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:namelti.server.MapVaule)
  // repeated string dict = 1;
  for (int i = 0; i < this->dict_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dict(i).data(), this->dict(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "namelti.server.MapVaule.dict");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->dict(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:namelti.server.MapVaule)
  return target;
}

size_t MapVaule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:namelti.server.MapVaule)
  size_t total_size = 0;

  // repeated string dict = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->dict_size());
  for (int i = 0; i < this->dict_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->dict(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapVaule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:namelti.server.MapVaule)
  GOOGLE_DCHECK_NE(&from, this);
  const MapVaule* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MapVaule>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:namelti.server.MapVaule)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:namelti.server.MapVaule)
    MergeFrom(*source);
  }
}

void MapVaule::MergeFrom(const MapVaule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:namelti.server.MapVaule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dict_.MergeFrom(from.dict_);
}

void MapVaule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:namelti.server.MapVaule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapVaule::CopyFrom(const MapVaule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:namelti.server.MapVaule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapVaule::IsInitialized() const {
  return true;
}

void MapVaule::Swap(MapVaule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MapVaule::InternalSwap(MapVaule* other) {
  dict_.UnsafeArenaSwap(&other->dict_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MapVaule::GetMetadata() const {
  protobuf_namelti_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_namelti_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MapVaule

// repeated string dict = 1;
int MapVaule::dict_size() const {
  return dict_.size();
}
void MapVaule::clear_dict() {
  dict_.Clear();
}
const ::std::string& MapVaule::dict(int index) const {
  // @@protoc_insertion_point(field_get:namelti.server.MapVaule.dict)
  return dict_.Get(index);
}
::std::string* MapVaule::mutable_dict(int index) {
  // @@protoc_insertion_point(field_mutable:namelti.server.MapVaule.dict)
  return dict_.Mutable(index);
}
void MapVaule::set_dict(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:namelti.server.MapVaule.dict)
  dict_.Mutable(index)->assign(value);
}
void MapVaule::set_dict(int index, const char* value) {
  dict_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:namelti.server.MapVaule.dict)
}
void MapVaule::set_dict(int index, const char* value, size_t size) {
  dict_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:namelti.server.MapVaule.dict)
}
::std::string* MapVaule::add_dict() {
  // @@protoc_insertion_point(field_add_mutable:namelti.server.MapVaule.dict)
  return dict_.Add();
}
void MapVaule::add_dict(const ::std::string& value) {
  dict_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:namelti.server.MapVaule.dict)
}
void MapVaule::add_dict(const char* value) {
  dict_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:namelti.server.MapVaule.dict)
}
void MapVaule::add_dict(const char* value, size_t size) {
  dict_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:namelti.server.MapVaule.dict)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
MapVaule::dict() const {
  // @@protoc_insertion_point(field_list:namelti.server.MapVaule.dict)
  return dict_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
MapVaule::mutable_dict() {
  // @@protoc_insertion_point(field_mutable_list:namelti.server.MapVaule.dict)
  return &dict_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NameltiTranscriptResponse::kResultsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NameltiTranscriptResponse::NameltiTranscriptResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_namelti_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:namelti.server.NameltiTranscriptResponse)
}
NameltiTranscriptResponse::NameltiTranscriptResponse(const NameltiTranscriptResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  const ::google::protobuf::Descriptor*& NameltiTranscriptResponse_ResultsEntry_descriptor = protobuf_namelti_2eproto::file_level_metadata[2].descriptor;
  results_.SetAssignDescriptorCallback(
      protobuf_namelti_2eproto::protobuf_AssignDescriptorsOnce);
  results_.SetEntryDescriptor(
      &NameltiTranscriptResponse_ResultsEntry_descriptor);
  results_.MergeFrom(from.results_);
  // @@protoc_insertion_point(copy_constructor:namelti.server.NameltiTranscriptResponse)
}

void NameltiTranscriptResponse::SharedCtor() {
  const ::google::protobuf::Descriptor*& NameltiTranscriptResponse_ResultsEntry_descriptor = protobuf_namelti_2eproto::file_level_metadata[2].descriptor;
  results_.SetAssignDescriptorCallback(
      protobuf_namelti_2eproto::protobuf_AssignDescriptorsOnce);
  results_.SetEntryDescriptor(
      &NameltiTranscriptResponse_ResultsEntry_descriptor);
  _cached_size_ = 0;
}

NameltiTranscriptResponse::~NameltiTranscriptResponse() {
  // @@protoc_insertion_point(destructor:namelti.server.NameltiTranscriptResponse)
  SharedDtor();
}

void NameltiTranscriptResponse::SharedDtor() {
}

void NameltiTranscriptResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NameltiTranscriptResponse::descriptor() {
  protobuf_namelti_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_namelti_2eproto::file_level_metadata[3].descriptor;
}

const NameltiTranscriptResponse& NameltiTranscriptResponse::default_instance() {
  protobuf_namelti_2eproto::InitDefaults();
  return *internal_default_instance();
}

NameltiTranscriptResponse* NameltiTranscriptResponse::New(::google::protobuf::Arena* arena) const {
  NameltiTranscriptResponse* n = new NameltiTranscriptResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NameltiTranscriptResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:namelti.server.NameltiTranscriptResponse)
  results_.Clear();
}

bool NameltiTranscriptResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:namelti.server.NameltiTranscriptResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, .namelti.server.MapVaule> results = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          NameltiTranscriptResponse_ResultsEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::namelti::server::MapVaule,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::namelti::server::MapVaule > > parser(&results_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "namelti.server.NameltiTranscriptResponse.ResultsEntry.key"));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:namelti.server.NameltiTranscriptResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:namelti.server.NameltiTranscriptResponse)
  return false;
#undef DO_
}

void NameltiTranscriptResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:namelti.server.NameltiTranscriptResponse)
  // map<string, .namelti.server.MapVaule> results = 1;
  if (!this->results().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::namelti::server::MapVaule >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "namelti.server.NameltiTranscriptResponse.ResultsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->results().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->results().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::namelti::server::MapVaule >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::namelti::server::MapVaule >::const_iterator
          it = this->results().begin();
          it != this->results().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<NameltiTranscriptResponse_ResultsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(results_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<NameltiTranscriptResponse_ResultsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::namelti::server::MapVaule >::const_iterator
          it = this->results().begin();
          it != this->results().end(); ++it) {
        entry.reset(results_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:namelti.server.NameltiTranscriptResponse)
}

::google::protobuf::uint8* NameltiTranscriptResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:namelti.server.NameltiTranscriptResponse)
  // map<string, .namelti.server.MapVaule> results = 1;
  if (!this->results().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::namelti::server::MapVaule >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "namelti.server.NameltiTranscriptResponse.ResultsEntry.key");
      }
    };

    if (deterministic &&
        this->results().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->results().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::namelti::server::MapVaule >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::namelti::server::MapVaule >::const_iterator
          it = this->results().begin();
          it != this->results().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<NameltiTranscriptResponse_ResultsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(results_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<NameltiTranscriptResponse_ResultsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::namelti::server::MapVaule >::const_iterator
          it = this->results().begin();
          it != this->results().end(); ++it) {
        entry.reset(results_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:namelti.server.NameltiTranscriptResponse)
  return target;
}

size_t NameltiTranscriptResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:namelti.server.NameltiTranscriptResponse)
  size_t total_size = 0;

  // map<string, .namelti.server.MapVaule> results = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->results_size());
  {
    ::google::protobuf::scoped_ptr<NameltiTranscriptResponse_ResultsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::namelti::server::MapVaule >::const_iterator
        it = this->results().begin();
        it != this->results().end(); ++it) {
      entry.reset(results_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NameltiTranscriptResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:namelti.server.NameltiTranscriptResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const NameltiTranscriptResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NameltiTranscriptResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:namelti.server.NameltiTranscriptResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:namelti.server.NameltiTranscriptResponse)
    MergeFrom(*source);
  }
}

void NameltiTranscriptResponse::MergeFrom(const NameltiTranscriptResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:namelti.server.NameltiTranscriptResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  results_.MergeFrom(from.results_);
}

void NameltiTranscriptResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:namelti.server.NameltiTranscriptResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NameltiTranscriptResponse::CopyFrom(const NameltiTranscriptResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:namelti.server.NameltiTranscriptResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NameltiTranscriptResponse::IsInitialized() const {
  return true;
}

void NameltiTranscriptResponse::Swap(NameltiTranscriptResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NameltiTranscriptResponse::InternalSwap(NameltiTranscriptResponse* other) {
  results_.Swap(&other->results_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NameltiTranscriptResponse::GetMetadata() const {
  protobuf_namelti_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_namelti_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NameltiTranscriptResponse

// map<string, .namelti.server.MapVaule> results = 1;
int NameltiTranscriptResponse::results_size() const {
  return results_.size();
}
void NameltiTranscriptResponse::clear_results() {
  results_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::namelti::server::MapVaule >&
NameltiTranscriptResponse::results() const {
  // @@protoc_insertion_point(field_map:namelti.server.NameltiTranscriptResponse.results)
  return results_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::namelti::server::MapVaule >*
NameltiTranscriptResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_map:namelti.server.NameltiTranscriptResponse.results)
  return results_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace server
}  // namespace namelti

// @@protoc_insertion_point(global_scope)
