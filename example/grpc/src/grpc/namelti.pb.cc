// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: namelti.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "namelti.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace namelti {
namespace server {
class NameltiTranscriptRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NameltiTranscriptRequest> {
} _NameltiTranscriptRequest_default_instance_;
class NameltiTranscriptRequestsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NameltiTranscriptRequests> {
} _NameltiTranscriptRequests_default_instance_;
class ResultList_ResultDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ResultList_Result> {
} _ResultList_Result_default_instance_;
class ResultListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ResultList> {
} _ResultList_default_instance_;
class NameltiTranscriptResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NameltiTranscriptResponse> {
} _NameltiTranscriptResponse_default_instance_;
class NameltiTranscriptResponsesDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NameltiTranscriptResponses> {
} _NameltiTranscriptResponses_default_instance_;

namespace protobuf_namelti_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[7];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameltiTranscriptRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameltiTranscriptRequest, query_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameltiTranscriptRequests, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameltiTranscriptRequests, queries_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultList_Result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultList_Result, yomi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultList_Result, score_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultList, results_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameltiTranscriptResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameltiTranscriptResponse, surface_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameltiTranscriptResponse, results_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameltiTranscriptResponses, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameltiTranscriptResponses, responses_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(NameltiTranscriptRequest)},
  { 5, -1, sizeof(NameltiTranscriptRequests)},
  { 10, -1, sizeof(ResultList_Result)},
  { 16, -1, sizeof(ResultList)},
  { 21, -1, sizeof(NameltiTranscriptResponse)},
  { 27, -1, sizeof(NameltiTranscriptResponses)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_NameltiTranscriptRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NameltiTranscriptRequests_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ResultList_Result_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ResultList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NameltiTranscriptResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NameltiTranscriptResponses_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "namelti.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
  const ::google::protobuf::Descriptor* NameltiTranscriptResponses_ResponsesEntry_descriptor = protobuf_namelti_2eproto::file_level_metadata[5].descriptor;
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        NameltiTranscriptResponses_ResponsesEntry_descriptor,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::namelti::server::ResultList,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                NameltiTranscriptResponses_ResponsesEntry_descriptor));
}

}  // namespace

void TableStruct::Shutdown() {
  _NameltiTranscriptRequest_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _NameltiTranscriptRequests_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _ResultList_Result_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _ResultList_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _NameltiTranscriptResponse_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _NameltiTranscriptResponses_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _NameltiTranscriptRequest_default_instance_.DefaultConstruct();
  _NameltiTranscriptRequests_default_instance_.DefaultConstruct();
  _ResultList_Result_default_instance_.DefaultConstruct();
  _ResultList_default_instance_.DefaultConstruct();
  _NameltiTranscriptResponse_default_instance_.DefaultConstruct();
  _NameltiTranscriptResponses_default_instance_.DefaultConstruct();
  _NameltiTranscriptResponse_default_instance_.get_mutable()->results_ = const_cast< ::namelti::server::ResultList*>(
      ::namelti::server::ResultList::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\rnamelti.proto\022\016namelti.server\")\n\030Namel"
      "tiTranscriptRequest\022\r\n\005query\030\001 \001(\t\",\n\031Na"
      "meltiTranscriptRequests\022\017\n\007queries\030\001 \003(\t"
      "\"g\n\nResultList\0222\n\007results\030\001 \003(\0132!.namelt"
      "i.server.ResultList.Result\032%\n\006Result\022\014\n\004"
      "yomi\030\001 \001(\t\022\r\n\005score\030\002 \001(\002\"Y\n\031NameltiTran"
      "scriptResponse\022\017\n\007surface\030\001 \001(\t\022+\n\007resul"
      "ts\030\002 \001(\0132\032.namelti.server.ResultList\"\270\001\n"
      "\032NameltiTranscriptResponses\022L\n\tresponses"
      "\030\001 \003(\01329.namelti.server.NameltiTranscrip"
      "tResponses.ResponsesEntry\032L\n\016ResponsesEn"
      "try\022\013\n\003key\030\001 \001(\t\022)\n\005value\030\002 \001(\0132\032.namelt"
      "i.server.ResultList:\0028\0012\342\001\n\016NameltiServi"
      "ce\022d\n\013ConvertName\022(.namelti.server.Namel"
      "tiTranscriptRequest\032).namelti.server.Nam"
      "eltiTranscriptResponse\"\000\022j\n\017ConvertNameL"
      "ist\022).namelti.server.NameltiTranscriptRe"
      "quests\032*.namelti.server.NameltiTranscrip"
      "tResponses\"\000b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 740);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "namelti.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_namelti_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NameltiTranscriptRequest::kQueryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NameltiTranscriptRequest::NameltiTranscriptRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_namelti_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:namelti.server.NameltiTranscriptRequest)
}
NameltiTranscriptRequest::NameltiTranscriptRequest(const NameltiTranscriptRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.query().size() > 0) {
    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  // @@protoc_insertion_point(copy_constructor:namelti.server.NameltiTranscriptRequest)
}

void NameltiTranscriptRequest::SharedCtor() {
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

NameltiTranscriptRequest::~NameltiTranscriptRequest() {
  // @@protoc_insertion_point(destructor:namelti.server.NameltiTranscriptRequest)
  SharedDtor();
}

void NameltiTranscriptRequest::SharedDtor() {
  query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NameltiTranscriptRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NameltiTranscriptRequest::descriptor() {
  protobuf_namelti_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_namelti_2eproto::file_level_metadata[0].descriptor;
}

const NameltiTranscriptRequest& NameltiTranscriptRequest::default_instance() {
  protobuf_namelti_2eproto::InitDefaults();
  return *internal_default_instance();
}

NameltiTranscriptRequest* NameltiTranscriptRequest::New(::google::protobuf::Arena* arena) const {
  NameltiTranscriptRequest* n = new NameltiTranscriptRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NameltiTranscriptRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:namelti.server.NameltiTranscriptRequest)
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool NameltiTranscriptRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:namelti.server.NameltiTranscriptRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string query = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->query().data(), this->query().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "namelti.server.NameltiTranscriptRequest.query"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:namelti.server.NameltiTranscriptRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:namelti.server.NameltiTranscriptRequest)
  return false;
#undef DO_
}

void NameltiTranscriptRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:namelti.server.NameltiTranscriptRequest)
  // string query = 1;
  if (this->query().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "namelti.server.NameltiTranscriptRequest.query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->query(), output);
  }

  // @@protoc_insertion_point(serialize_end:namelti.server.NameltiTranscriptRequest)
}

::google::protobuf::uint8* NameltiTranscriptRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:namelti.server.NameltiTranscriptRequest)
  // string query = 1;
  if (this->query().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "namelti.server.NameltiTranscriptRequest.query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->query(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:namelti.server.NameltiTranscriptRequest)
  return target;
}

size_t NameltiTranscriptRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:namelti.server.NameltiTranscriptRequest)
  size_t total_size = 0;

  // string query = 1;
  if (this->query().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->query());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NameltiTranscriptRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:namelti.server.NameltiTranscriptRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const NameltiTranscriptRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NameltiTranscriptRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:namelti.server.NameltiTranscriptRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:namelti.server.NameltiTranscriptRequest)
    MergeFrom(*source);
  }
}

void NameltiTranscriptRequest::MergeFrom(const NameltiTranscriptRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:namelti.server.NameltiTranscriptRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.query().size() > 0) {

    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
}

void NameltiTranscriptRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:namelti.server.NameltiTranscriptRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NameltiTranscriptRequest::CopyFrom(const NameltiTranscriptRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:namelti.server.NameltiTranscriptRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NameltiTranscriptRequest::IsInitialized() const {
  return true;
}

void NameltiTranscriptRequest::Swap(NameltiTranscriptRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NameltiTranscriptRequest::InternalSwap(NameltiTranscriptRequest* other) {
  query_.Swap(&other->query_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NameltiTranscriptRequest::GetMetadata() const {
  protobuf_namelti_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_namelti_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NameltiTranscriptRequest

// string query = 1;
void NameltiTranscriptRequest::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NameltiTranscriptRequest::query() const {
  // @@protoc_insertion_point(field_get:namelti.server.NameltiTranscriptRequest.query)
  return query_.GetNoArena();
}
void NameltiTranscriptRequest::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:namelti.server.NameltiTranscriptRequest.query)
}
#if LANG_CXX11
void NameltiTranscriptRequest::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:namelti.server.NameltiTranscriptRequest.query)
}
#endif
void NameltiTranscriptRequest::set_query(const char* value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:namelti.server.NameltiTranscriptRequest.query)
}
void NameltiTranscriptRequest::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:namelti.server.NameltiTranscriptRequest.query)
}
::std::string* NameltiTranscriptRequest::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:namelti.server.NameltiTranscriptRequest.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NameltiTranscriptRequest::release_query() {
  // @@protoc_insertion_point(field_release:namelti.server.NameltiTranscriptRequest.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NameltiTranscriptRequest::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:namelti.server.NameltiTranscriptRequest.query)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NameltiTranscriptRequests::kQueriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NameltiTranscriptRequests::NameltiTranscriptRequests()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_namelti_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:namelti.server.NameltiTranscriptRequests)
}
NameltiTranscriptRequests::NameltiTranscriptRequests(const NameltiTranscriptRequests& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      queries_(from.queries_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:namelti.server.NameltiTranscriptRequests)
}

void NameltiTranscriptRequests::SharedCtor() {
  _cached_size_ = 0;
}

NameltiTranscriptRequests::~NameltiTranscriptRequests() {
  // @@protoc_insertion_point(destructor:namelti.server.NameltiTranscriptRequests)
  SharedDtor();
}

void NameltiTranscriptRequests::SharedDtor() {
}

void NameltiTranscriptRequests::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NameltiTranscriptRequests::descriptor() {
  protobuf_namelti_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_namelti_2eproto::file_level_metadata[1].descriptor;
}

const NameltiTranscriptRequests& NameltiTranscriptRequests::default_instance() {
  protobuf_namelti_2eproto::InitDefaults();
  return *internal_default_instance();
}

NameltiTranscriptRequests* NameltiTranscriptRequests::New(::google::protobuf::Arena* arena) const {
  NameltiTranscriptRequests* n = new NameltiTranscriptRequests;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NameltiTranscriptRequests::Clear() {
// @@protoc_insertion_point(message_clear_start:namelti.server.NameltiTranscriptRequests)
  queries_.Clear();
}

bool NameltiTranscriptRequests::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:namelti.server.NameltiTranscriptRequests)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string queries = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_queries()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->queries(this->queries_size() - 1).data(),
            this->queries(this->queries_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "namelti.server.NameltiTranscriptRequests.queries"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:namelti.server.NameltiTranscriptRequests)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:namelti.server.NameltiTranscriptRequests)
  return false;
#undef DO_
}

void NameltiTranscriptRequests::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:namelti.server.NameltiTranscriptRequests)
  // repeated string queries = 1;
  for (int i = 0; i < this->queries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->queries(i).data(), this->queries(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "namelti.server.NameltiTranscriptRequests.queries");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->queries(i), output);
  }

  // @@protoc_insertion_point(serialize_end:namelti.server.NameltiTranscriptRequests)
}

::google::protobuf::uint8* NameltiTranscriptRequests::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:namelti.server.NameltiTranscriptRequests)
  // repeated string queries = 1;
  for (int i = 0; i < this->queries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->queries(i).data(), this->queries(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "namelti.server.NameltiTranscriptRequests.queries");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->queries(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:namelti.server.NameltiTranscriptRequests)
  return target;
}

size_t NameltiTranscriptRequests::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:namelti.server.NameltiTranscriptRequests)
  size_t total_size = 0;

  // repeated string queries = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->queries_size());
  for (int i = 0; i < this->queries_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->queries(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NameltiTranscriptRequests::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:namelti.server.NameltiTranscriptRequests)
  GOOGLE_DCHECK_NE(&from, this);
  const NameltiTranscriptRequests* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NameltiTranscriptRequests>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:namelti.server.NameltiTranscriptRequests)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:namelti.server.NameltiTranscriptRequests)
    MergeFrom(*source);
  }
}

void NameltiTranscriptRequests::MergeFrom(const NameltiTranscriptRequests& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:namelti.server.NameltiTranscriptRequests)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  queries_.MergeFrom(from.queries_);
}

void NameltiTranscriptRequests::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:namelti.server.NameltiTranscriptRequests)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NameltiTranscriptRequests::CopyFrom(const NameltiTranscriptRequests& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:namelti.server.NameltiTranscriptRequests)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NameltiTranscriptRequests::IsInitialized() const {
  return true;
}

void NameltiTranscriptRequests::Swap(NameltiTranscriptRequests* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NameltiTranscriptRequests::InternalSwap(NameltiTranscriptRequests* other) {
  queries_.UnsafeArenaSwap(&other->queries_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NameltiTranscriptRequests::GetMetadata() const {
  protobuf_namelti_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_namelti_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NameltiTranscriptRequests

// repeated string queries = 1;
int NameltiTranscriptRequests::queries_size() const {
  return queries_.size();
}
void NameltiTranscriptRequests::clear_queries() {
  queries_.Clear();
}
const ::std::string& NameltiTranscriptRequests::queries(int index) const {
  // @@protoc_insertion_point(field_get:namelti.server.NameltiTranscriptRequests.queries)
  return queries_.Get(index);
}
::std::string* NameltiTranscriptRequests::mutable_queries(int index) {
  // @@protoc_insertion_point(field_mutable:namelti.server.NameltiTranscriptRequests.queries)
  return queries_.Mutable(index);
}
void NameltiTranscriptRequests::set_queries(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:namelti.server.NameltiTranscriptRequests.queries)
  queries_.Mutable(index)->assign(value);
}
void NameltiTranscriptRequests::set_queries(int index, const char* value) {
  queries_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:namelti.server.NameltiTranscriptRequests.queries)
}
void NameltiTranscriptRequests::set_queries(int index, const char* value, size_t size) {
  queries_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:namelti.server.NameltiTranscriptRequests.queries)
}
::std::string* NameltiTranscriptRequests::add_queries() {
  // @@protoc_insertion_point(field_add_mutable:namelti.server.NameltiTranscriptRequests.queries)
  return queries_.Add();
}
void NameltiTranscriptRequests::add_queries(const ::std::string& value) {
  queries_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:namelti.server.NameltiTranscriptRequests.queries)
}
void NameltiTranscriptRequests::add_queries(const char* value) {
  queries_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:namelti.server.NameltiTranscriptRequests.queries)
}
void NameltiTranscriptRequests::add_queries(const char* value, size_t size) {
  queries_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:namelti.server.NameltiTranscriptRequests.queries)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
NameltiTranscriptRequests::queries() const {
  // @@protoc_insertion_point(field_list:namelti.server.NameltiTranscriptRequests.queries)
  return queries_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
NameltiTranscriptRequests::mutable_queries() {
  // @@protoc_insertion_point(field_mutable_list:namelti.server.NameltiTranscriptRequests.queries)
  return &queries_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResultList_Result::kYomiFieldNumber;
const int ResultList_Result::kScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResultList_Result::ResultList_Result()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_namelti_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:namelti.server.ResultList.Result)
}
ResultList_Result::ResultList_Result(const ResultList_Result& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  yomi_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.yomi().size() > 0) {
    yomi_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.yomi_);
  }
  score_ = from.score_;
  // @@protoc_insertion_point(copy_constructor:namelti.server.ResultList.Result)
}

void ResultList_Result::SharedCtor() {
  yomi_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  score_ = 0;
  _cached_size_ = 0;
}

ResultList_Result::~ResultList_Result() {
  // @@protoc_insertion_point(destructor:namelti.server.ResultList.Result)
  SharedDtor();
}

void ResultList_Result::SharedDtor() {
  yomi_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ResultList_Result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResultList_Result::descriptor() {
  protobuf_namelti_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_namelti_2eproto::file_level_metadata[2].descriptor;
}

const ResultList_Result& ResultList_Result::default_instance() {
  protobuf_namelti_2eproto::InitDefaults();
  return *internal_default_instance();
}

ResultList_Result* ResultList_Result::New(::google::protobuf::Arena* arena) const {
  ResultList_Result* n = new ResultList_Result;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResultList_Result::Clear() {
// @@protoc_insertion_point(message_clear_start:namelti.server.ResultList.Result)
  yomi_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  score_ = 0;
}

bool ResultList_Result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:namelti.server.ResultList.Result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string yomi = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_yomi()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->yomi().data(), this->yomi().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "namelti.server.ResultList.Result.yomi"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float score = 2;
      case 2: {
        if (tag == 21u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:namelti.server.ResultList.Result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:namelti.server.ResultList.Result)
  return false;
#undef DO_
}

void ResultList_Result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:namelti.server.ResultList.Result)
  // string yomi = 1;
  if (this->yomi().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->yomi().data(), this->yomi().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "namelti.server.ResultList.Result.yomi");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->yomi(), output);
  }

  // float score = 2;
  if (this->score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->score(), output);
  }

  // @@protoc_insertion_point(serialize_end:namelti.server.ResultList.Result)
}

::google::protobuf::uint8* ResultList_Result::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:namelti.server.ResultList.Result)
  // string yomi = 1;
  if (this->yomi().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->yomi().data(), this->yomi().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "namelti.server.ResultList.Result.yomi");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->yomi(), target);
  }

  // float score = 2;
  if (this->score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->score(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:namelti.server.ResultList.Result)
  return target;
}

size_t ResultList_Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:namelti.server.ResultList.Result)
  size_t total_size = 0;

  // string yomi = 1;
  if (this->yomi().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->yomi());
  }

  // float score = 2;
  if (this->score() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResultList_Result::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:namelti.server.ResultList.Result)
  GOOGLE_DCHECK_NE(&from, this);
  const ResultList_Result* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResultList_Result>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:namelti.server.ResultList.Result)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:namelti.server.ResultList.Result)
    MergeFrom(*source);
  }
}

void ResultList_Result::MergeFrom(const ResultList_Result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:namelti.server.ResultList.Result)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.yomi().size() > 0) {

    yomi_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.yomi_);
  }
  if (from.score() != 0) {
    set_score(from.score());
  }
}

void ResultList_Result::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:namelti.server.ResultList.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResultList_Result::CopyFrom(const ResultList_Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:namelti.server.ResultList.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResultList_Result::IsInitialized() const {
  return true;
}

void ResultList_Result::Swap(ResultList_Result* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResultList_Result::InternalSwap(ResultList_Result* other) {
  yomi_.Swap(&other->yomi_);
  std::swap(score_, other->score_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResultList_Result::GetMetadata() const {
  protobuf_namelti_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_namelti_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResultList_Result

// string yomi = 1;
void ResultList_Result::clear_yomi() {
  yomi_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ResultList_Result::yomi() const {
  // @@protoc_insertion_point(field_get:namelti.server.ResultList.Result.yomi)
  return yomi_.GetNoArena();
}
void ResultList_Result::set_yomi(const ::std::string& value) {
  
  yomi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:namelti.server.ResultList.Result.yomi)
}
#if LANG_CXX11
void ResultList_Result::set_yomi(::std::string&& value) {
  
  yomi_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:namelti.server.ResultList.Result.yomi)
}
#endif
void ResultList_Result::set_yomi(const char* value) {
  
  yomi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:namelti.server.ResultList.Result.yomi)
}
void ResultList_Result::set_yomi(const char* value, size_t size) {
  
  yomi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:namelti.server.ResultList.Result.yomi)
}
::std::string* ResultList_Result::mutable_yomi() {
  
  // @@protoc_insertion_point(field_mutable:namelti.server.ResultList.Result.yomi)
  return yomi_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ResultList_Result::release_yomi() {
  // @@protoc_insertion_point(field_release:namelti.server.ResultList.Result.yomi)
  
  return yomi_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ResultList_Result::set_allocated_yomi(::std::string* yomi) {
  if (yomi != NULL) {
    
  } else {
    
  }
  yomi_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), yomi);
  // @@protoc_insertion_point(field_set_allocated:namelti.server.ResultList.Result.yomi)
}

// float score = 2;
void ResultList_Result::clear_score() {
  score_ = 0;
}
float ResultList_Result::score() const {
  // @@protoc_insertion_point(field_get:namelti.server.ResultList.Result.score)
  return score_;
}
void ResultList_Result::set_score(float value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:namelti.server.ResultList.Result.score)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResultList::kResultsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResultList::ResultList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_namelti_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:namelti.server.ResultList)
}
ResultList::ResultList(const ResultList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      results_(from.results_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:namelti.server.ResultList)
}

void ResultList::SharedCtor() {
  _cached_size_ = 0;
}

ResultList::~ResultList() {
  // @@protoc_insertion_point(destructor:namelti.server.ResultList)
  SharedDtor();
}

void ResultList::SharedDtor() {
}

void ResultList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResultList::descriptor() {
  protobuf_namelti_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_namelti_2eproto::file_level_metadata[3].descriptor;
}

const ResultList& ResultList::default_instance() {
  protobuf_namelti_2eproto::InitDefaults();
  return *internal_default_instance();
}

ResultList* ResultList::New(::google::protobuf::Arena* arena) const {
  ResultList* n = new ResultList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResultList::Clear() {
// @@protoc_insertion_point(message_clear_start:namelti.server.ResultList)
  results_.Clear();
}

bool ResultList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:namelti.server.ResultList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .namelti.server.ResultList.Result results = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_results()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:namelti.server.ResultList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:namelti.server.ResultList)
  return false;
#undef DO_
}

void ResultList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:namelti.server.ResultList)
  // repeated .namelti.server.ResultList.Result results = 1;
  for (unsigned int i = 0, n = this->results_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->results(i), output);
  }

  // @@protoc_insertion_point(serialize_end:namelti.server.ResultList)
}

::google::protobuf::uint8* ResultList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:namelti.server.ResultList)
  // repeated .namelti.server.ResultList.Result results = 1;
  for (unsigned int i = 0, n = this->results_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->results(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:namelti.server.ResultList)
  return target;
}

size_t ResultList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:namelti.server.ResultList)
  size_t total_size = 0;

  // repeated .namelti.server.ResultList.Result results = 1;
  {
    unsigned int count = this->results_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->results(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResultList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:namelti.server.ResultList)
  GOOGLE_DCHECK_NE(&from, this);
  const ResultList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResultList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:namelti.server.ResultList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:namelti.server.ResultList)
    MergeFrom(*source);
  }
}

void ResultList::MergeFrom(const ResultList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:namelti.server.ResultList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  results_.MergeFrom(from.results_);
}

void ResultList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:namelti.server.ResultList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResultList::CopyFrom(const ResultList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:namelti.server.ResultList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResultList::IsInitialized() const {
  return true;
}

void ResultList::Swap(ResultList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResultList::InternalSwap(ResultList* other) {
  results_.UnsafeArenaSwap(&other->results_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResultList::GetMetadata() const {
  protobuf_namelti_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_namelti_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResultList

// repeated .namelti.server.ResultList.Result results = 1;
int ResultList::results_size() const {
  return results_.size();
}
void ResultList::clear_results() {
  results_.Clear();
}
const ::namelti::server::ResultList_Result& ResultList::results(int index) const {
  // @@protoc_insertion_point(field_get:namelti.server.ResultList.results)
  return results_.Get(index);
}
::namelti::server::ResultList_Result* ResultList::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:namelti.server.ResultList.results)
  return results_.Mutable(index);
}
::namelti::server::ResultList_Result* ResultList::add_results() {
  // @@protoc_insertion_point(field_add:namelti.server.ResultList.results)
  return results_.Add();
}
::google::protobuf::RepeatedPtrField< ::namelti::server::ResultList_Result >*
ResultList::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:namelti.server.ResultList.results)
  return &results_;
}
const ::google::protobuf::RepeatedPtrField< ::namelti::server::ResultList_Result >&
ResultList::results() const {
  // @@protoc_insertion_point(field_list:namelti.server.ResultList.results)
  return results_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NameltiTranscriptResponse::kSurfaceFieldNumber;
const int NameltiTranscriptResponse::kResultsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NameltiTranscriptResponse::NameltiTranscriptResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_namelti_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:namelti.server.NameltiTranscriptResponse)
}
NameltiTranscriptResponse::NameltiTranscriptResponse(const NameltiTranscriptResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  surface_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.surface().size() > 0) {
    surface_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.surface_);
  }
  if (from.has_results()) {
    results_ = new ::namelti::server::ResultList(*from.results_);
  } else {
    results_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:namelti.server.NameltiTranscriptResponse)
}

void NameltiTranscriptResponse::SharedCtor() {
  surface_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  results_ = NULL;
  _cached_size_ = 0;
}

NameltiTranscriptResponse::~NameltiTranscriptResponse() {
  // @@protoc_insertion_point(destructor:namelti.server.NameltiTranscriptResponse)
  SharedDtor();
}

void NameltiTranscriptResponse::SharedDtor() {
  surface_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete results_;
  }
}

void NameltiTranscriptResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NameltiTranscriptResponse::descriptor() {
  protobuf_namelti_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_namelti_2eproto::file_level_metadata[4].descriptor;
}

const NameltiTranscriptResponse& NameltiTranscriptResponse::default_instance() {
  protobuf_namelti_2eproto::InitDefaults();
  return *internal_default_instance();
}

NameltiTranscriptResponse* NameltiTranscriptResponse::New(::google::protobuf::Arena* arena) const {
  NameltiTranscriptResponse* n = new NameltiTranscriptResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NameltiTranscriptResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:namelti.server.NameltiTranscriptResponse)
  surface_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && results_ != NULL) {
    delete results_;
  }
  results_ = NULL;
}

bool NameltiTranscriptResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:namelti.server.NameltiTranscriptResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string surface = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_surface()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->surface().data(), this->surface().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "namelti.server.NameltiTranscriptResponse.surface"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .namelti.server.ResultList results = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_results()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:namelti.server.NameltiTranscriptResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:namelti.server.NameltiTranscriptResponse)
  return false;
#undef DO_
}

void NameltiTranscriptResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:namelti.server.NameltiTranscriptResponse)
  // string surface = 1;
  if (this->surface().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->surface().data(), this->surface().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "namelti.server.NameltiTranscriptResponse.surface");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->surface(), output);
  }

  // .namelti.server.ResultList results = 2;
  if (this->has_results()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->results_, output);
  }

  // @@protoc_insertion_point(serialize_end:namelti.server.NameltiTranscriptResponse)
}

::google::protobuf::uint8* NameltiTranscriptResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:namelti.server.NameltiTranscriptResponse)
  // string surface = 1;
  if (this->surface().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->surface().data(), this->surface().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "namelti.server.NameltiTranscriptResponse.surface");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->surface(), target);
  }

  // .namelti.server.ResultList results = 2;
  if (this->has_results()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->results_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:namelti.server.NameltiTranscriptResponse)
  return target;
}

size_t NameltiTranscriptResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:namelti.server.NameltiTranscriptResponse)
  size_t total_size = 0;

  // string surface = 1;
  if (this->surface().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->surface());
  }

  // .namelti.server.ResultList results = 2;
  if (this->has_results()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->results_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NameltiTranscriptResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:namelti.server.NameltiTranscriptResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const NameltiTranscriptResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NameltiTranscriptResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:namelti.server.NameltiTranscriptResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:namelti.server.NameltiTranscriptResponse)
    MergeFrom(*source);
  }
}

void NameltiTranscriptResponse::MergeFrom(const NameltiTranscriptResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:namelti.server.NameltiTranscriptResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.surface().size() > 0) {

    surface_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.surface_);
  }
  if (from.has_results()) {
    mutable_results()->::namelti::server::ResultList::MergeFrom(from.results());
  }
}

void NameltiTranscriptResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:namelti.server.NameltiTranscriptResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NameltiTranscriptResponse::CopyFrom(const NameltiTranscriptResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:namelti.server.NameltiTranscriptResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NameltiTranscriptResponse::IsInitialized() const {
  return true;
}

void NameltiTranscriptResponse::Swap(NameltiTranscriptResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NameltiTranscriptResponse::InternalSwap(NameltiTranscriptResponse* other) {
  surface_.Swap(&other->surface_);
  std::swap(results_, other->results_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NameltiTranscriptResponse::GetMetadata() const {
  protobuf_namelti_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_namelti_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NameltiTranscriptResponse

// string surface = 1;
void NameltiTranscriptResponse::clear_surface() {
  surface_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NameltiTranscriptResponse::surface() const {
  // @@protoc_insertion_point(field_get:namelti.server.NameltiTranscriptResponse.surface)
  return surface_.GetNoArena();
}
void NameltiTranscriptResponse::set_surface(const ::std::string& value) {
  
  surface_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:namelti.server.NameltiTranscriptResponse.surface)
}
#if LANG_CXX11
void NameltiTranscriptResponse::set_surface(::std::string&& value) {
  
  surface_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:namelti.server.NameltiTranscriptResponse.surface)
}
#endif
void NameltiTranscriptResponse::set_surface(const char* value) {
  
  surface_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:namelti.server.NameltiTranscriptResponse.surface)
}
void NameltiTranscriptResponse::set_surface(const char* value, size_t size) {
  
  surface_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:namelti.server.NameltiTranscriptResponse.surface)
}
::std::string* NameltiTranscriptResponse::mutable_surface() {
  
  // @@protoc_insertion_point(field_mutable:namelti.server.NameltiTranscriptResponse.surface)
  return surface_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NameltiTranscriptResponse::release_surface() {
  // @@protoc_insertion_point(field_release:namelti.server.NameltiTranscriptResponse.surface)
  
  return surface_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NameltiTranscriptResponse::set_allocated_surface(::std::string* surface) {
  if (surface != NULL) {
    
  } else {
    
  }
  surface_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), surface);
  // @@protoc_insertion_point(field_set_allocated:namelti.server.NameltiTranscriptResponse.surface)
}

// .namelti.server.ResultList results = 2;
bool NameltiTranscriptResponse::has_results() const {
  return this != internal_default_instance() && results_ != NULL;
}
void NameltiTranscriptResponse::clear_results() {
  if (GetArenaNoVirtual() == NULL && results_ != NULL) delete results_;
  results_ = NULL;
}
const ::namelti::server::ResultList& NameltiTranscriptResponse::results() const {
  // @@protoc_insertion_point(field_get:namelti.server.NameltiTranscriptResponse.results)
  return results_ != NULL ? *results_
                         : *::namelti::server::ResultList::internal_default_instance();
}
::namelti::server::ResultList* NameltiTranscriptResponse::mutable_results() {
  
  if (results_ == NULL) {
    results_ = new ::namelti::server::ResultList;
  }
  // @@protoc_insertion_point(field_mutable:namelti.server.NameltiTranscriptResponse.results)
  return results_;
}
::namelti::server::ResultList* NameltiTranscriptResponse::release_results() {
  // @@protoc_insertion_point(field_release:namelti.server.NameltiTranscriptResponse.results)
  
  ::namelti::server::ResultList* temp = results_;
  results_ = NULL;
  return temp;
}
void NameltiTranscriptResponse::set_allocated_results(::namelti::server::ResultList* results) {
  delete results_;
  results_ = results;
  if (results) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:namelti.server.NameltiTranscriptResponse.results)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NameltiTranscriptResponses::kResponsesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NameltiTranscriptResponses::NameltiTranscriptResponses()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_namelti_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:namelti.server.NameltiTranscriptResponses)
}
NameltiTranscriptResponses::NameltiTranscriptResponses(const NameltiTranscriptResponses& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  const ::google::protobuf::Descriptor*& NameltiTranscriptResponses_ResponsesEntry_descriptor = protobuf_namelti_2eproto::file_level_metadata[5].descriptor;
  responses_.SetAssignDescriptorCallback(
      protobuf_namelti_2eproto::protobuf_AssignDescriptorsOnce);
  responses_.SetEntryDescriptor(
      &NameltiTranscriptResponses_ResponsesEntry_descriptor);
  responses_.MergeFrom(from.responses_);
  // @@protoc_insertion_point(copy_constructor:namelti.server.NameltiTranscriptResponses)
}

void NameltiTranscriptResponses::SharedCtor() {
  const ::google::protobuf::Descriptor*& NameltiTranscriptResponses_ResponsesEntry_descriptor = protobuf_namelti_2eproto::file_level_metadata[5].descriptor;
  responses_.SetAssignDescriptorCallback(
      protobuf_namelti_2eproto::protobuf_AssignDescriptorsOnce);
  responses_.SetEntryDescriptor(
      &NameltiTranscriptResponses_ResponsesEntry_descriptor);
  _cached_size_ = 0;
}

NameltiTranscriptResponses::~NameltiTranscriptResponses() {
  // @@protoc_insertion_point(destructor:namelti.server.NameltiTranscriptResponses)
  SharedDtor();
}

void NameltiTranscriptResponses::SharedDtor() {
}

void NameltiTranscriptResponses::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NameltiTranscriptResponses::descriptor() {
  protobuf_namelti_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_namelti_2eproto::file_level_metadata[6].descriptor;
}

const NameltiTranscriptResponses& NameltiTranscriptResponses::default_instance() {
  protobuf_namelti_2eproto::InitDefaults();
  return *internal_default_instance();
}

NameltiTranscriptResponses* NameltiTranscriptResponses::New(::google::protobuf::Arena* arena) const {
  NameltiTranscriptResponses* n = new NameltiTranscriptResponses;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NameltiTranscriptResponses::Clear() {
// @@protoc_insertion_point(message_clear_start:namelti.server.NameltiTranscriptResponses)
  responses_.Clear();
}

bool NameltiTranscriptResponses::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:namelti.server.NameltiTranscriptResponses)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, .namelti.server.ResultList> responses = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          NameltiTranscriptResponses_ResponsesEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::namelti::server::ResultList,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::namelti::server::ResultList > > parser(&responses_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "namelti.server.NameltiTranscriptResponses.ResponsesEntry.key"));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:namelti.server.NameltiTranscriptResponses)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:namelti.server.NameltiTranscriptResponses)
  return false;
#undef DO_
}

void NameltiTranscriptResponses::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:namelti.server.NameltiTranscriptResponses)
  // map<string, .namelti.server.ResultList> responses = 1;
  if (!this->responses().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::namelti::server::ResultList >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "namelti.server.NameltiTranscriptResponses.ResponsesEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->responses().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->responses().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::namelti::server::ResultList >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::namelti::server::ResultList >::const_iterator
          it = this->responses().begin();
          it != this->responses().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<NameltiTranscriptResponses_ResponsesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(responses_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<NameltiTranscriptResponses_ResponsesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::namelti::server::ResultList >::const_iterator
          it = this->responses().begin();
          it != this->responses().end(); ++it) {
        entry.reset(responses_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:namelti.server.NameltiTranscriptResponses)
}

::google::protobuf::uint8* NameltiTranscriptResponses::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:namelti.server.NameltiTranscriptResponses)
  // map<string, .namelti.server.ResultList> responses = 1;
  if (!this->responses().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::namelti::server::ResultList >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "namelti.server.NameltiTranscriptResponses.ResponsesEntry.key");
      }
    };

    if (deterministic &&
        this->responses().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->responses().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::namelti::server::ResultList >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::namelti::server::ResultList >::const_iterator
          it = this->responses().begin();
          it != this->responses().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<NameltiTranscriptResponses_ResponsesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(responses_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<NameltiTranscriptResponses_ResponsesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::namelti::server::ResultList >::const_iterator
          it = this->responses().begin();
          it != this->responses().end(); ++it) {
        entry.reset(responses_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:namelti.server.NameltiTranscriptResponses)
  return target;
}

size_t NameltiTranscriptResponses::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:namelti.server.NameltiTranscriptResponses)
  size_t total_size = 0;

  // map<string, .namelti.server.ResultList> responses = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->responses_size());
  {
    ::google::protobuf::scoped_ptr<NameltiTranscriptResponses_ResponsesEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::namelti::server::ResultList >::const_iterator
        it = this->responses().begin();
        it != this->responses().end(); ++it) {
      entry.reset(responses_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NameltiTranscriptResponses::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:namelti.server.NameltiTranscriptResponses)
  GOOGLE_DCHECK_NE(&from, this);
  const NameltiTranscriptResponses* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NameltiTranscriptResponses>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:namelti.server.NameltiTranscriptResponses)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:namelti.server.NameltiTranscriptResponses)
    MergeFrom(*source);
  }
}

void NameltiTranscriptResponses::MergeFrom(const NameltiTranscriptResponses& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:namelti.server.NameltiTranscriptResponses)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  responses_.MergeFrom(from.responses_);
}

void NameltiTranscriptResponses::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:namelti.server.NameltiTranscriptResponses)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NameltiTranscriptResponses::CopyFrom(const NameltiTranscriptResponses& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:namelti.server.NameltiTranscriptResponses)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NameltiTranscriptResponses::IsInitialized() const {
  return true;
}

void NameltiTranscriptResponses::Swap(NameltiTranscriptResponses* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NameltiTranscriptResponses::InternalSwap(NameltiTranscriptResponses* other) {
  responses_.Swap(&other->responses_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NameltiTranscriptResponses::GetMetadata() const {
  protobuf_namelti_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_namelti_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NameltiTranscriptResponses

// map<string, .namelti.server.ResultList> responses = 1;
int NameltiTranscriptResponses::responses_size() const {
  return responses_.size();
}
void NameltiTranscriptResponses::clear_responses() {
  responses_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::namelti::server::ResultList >&
NameltiTranscriptResponses::responses() const {
  // @@protoc_insertion_point(field_map:namelti.server.NameltiTranscriptResponses.responses)
  return responses_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::namelti::server::ResultList >*
NameltiTranscriptResponses::mutable_responses() {
  // @@protoc_insertion_point(field_mutable_map:namelti.server.NameltiTranscriptResponses.responses)
  return responses_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace server
}  // namespace namelti

// @@protoc_insertion_point(global_scope)
