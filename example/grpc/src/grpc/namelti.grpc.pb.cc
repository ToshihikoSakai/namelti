// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: namelti.proto

#include "namelti.pb.h"
#include "namelti.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace namelti {
namespace server {

static const char* NameltiService_method_names[] = {
  "/namelti.server.NameltiService/ConvertName",
  "/namelti.server.NameltiService/ConvertNameList",
};

std::unique_ptr< NameltiService::Stub> NameltiService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< NameltiService::Stub> stub(new NameltiService::Stub(channel));
  return stub;
}

NameltiService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_ConvertName_(NameltiService_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ConvertNameList_(NameltiService_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status NameltiService::Stub::ConvertName(::grpc::ClientContext* context, const ::namelti::server::NameltiTranscriptRequest& request, ::namelti::server::NameltiTranscriptResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_ConvertName_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::namelti::server::NameltiTranscriptResponse>* NameltiService::Stub::AsyncConvertNameRaw(::grpc::ClientContext* context, const ::namelti::server::NameltiTranscriptRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::namelti::server::NameltiTranscriptResponse>(channel_.get(), cq, rpcmethod_ConvertName_, context, request);
}

::grpc::Status NameltiService::Stub::ConvertNameList(::grpc::ClientContext* context, const ::namelti::server::NameltiTranscriptRequests& request, ::namelti::server::NameltiTranscriptResponses* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_ConvertNameList_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::namelti::server::NameltiTranscriptResponses>* NameltiService::Stub::AsyncConvertNameListRaw(::grpc::ClientContext* context, const ::namelti::server::NameltiTranscriptRequests& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::namelti::server::NameltiTranscriptResponses>(channel_.get(), cq, rpcmethod_ConvertNameList_, context, request);
}

NameltiService::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      NameltiService_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< NameltiService::Service, ::namelti::server::NameltiTranscriptRequest, ::namelti::server::NameltiTranscriptResponse>(
          std::mem_fn(&NameltiService::Service::ConvertName), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      NameltiService_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< NameltiService::Service, ::namelti::server::NameltiTranscriptRequests, ::namelti::server::NameltiTranscriptResponses>(
          std::mem_fn(&NameltiService::Service::ConvertNameList), this)));
}

NameltiService::Service::~Service() {
}

::grpc::Status NameltiService::Service::ConvertName(::grpc::ServerContext* context, const ::namelti::server::NameltiTranscriptRequest* request, ::namelti::server::NameltiTranscriptResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NameltiService::Service::ConvertNameList(::grpc::ServerContext* context, const ::namelti::server::NameltiTranscriptRequests* request, ::namelti::server::NameltiTranscriptResponses* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace namelti
}  // namespace server

